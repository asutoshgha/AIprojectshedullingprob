class Data:

class Schedule:
    def __init__(self):
        self._data=data
        self._classes=[]
        self._numberOfConflicts=0
        self._fitness=-1
        self._classNumb=0
        self._isFitnessChanged=True

    def get_classes(self):
        return self._classes

    def get_numbOfConflicts(self):
        self._numberOfConflicts

    def get_fitness(self):

        if(self._isFitnessChanged == True):
            self._fitness=self.calculate_fitness()
            self._isFitnessChanged=False
        return self._fitness
    

    def initialize(self):
        depts=self._data.getdept()

        for i in range(0,len(depts)):
            courses=depts[i].get_courses()
            for j in range(0,len(courses)):
                newClass=Class(self._classNumb,depts[i],courses[i])
                self._classNumb+=1;
                newClass.set_meetingTime(data.get_meetingTimes()[rnd.randrange(0,len(data.get_meetingTimes()))])
                newClass.set_room(data.get_rooms()[rnd.randrange(0,len(data.get_rooms()))])
                newClass.set_instructor(courses[j].get_instructors()[rnd.randrange(0,len(courses[j].get_instructors()))])
                self._classes.append(newClass)
        return self
    def calculate_fitness(self):
        self._numberOfConflicts=0
        classes=self.get_classes()
        for i in range(0,len(classes)):
            if(classes[i].get_room().get_seatingCapacity() < classs[i].get_course().get_maxNumOfStudents()):
                self._numberOfConflicts+=1
            for j in range(0,len(classes)):
                if(j>=i):


class Population:

class GeneticAlgo:

class Course:
    def __init__(self,number,name,instructors,maxNumOfStudents):
        self._number=number
        self._name=name
        self._maxNumOfStudents=maxNumOfStudents
        self._instructors=instructors
    def get_number(self):
        return self._number
    def get_name(self):
        return self._name
    def get_instructors(self):
        return slef._instructors
    def get_maxNumOfStudents(self):
        return self._maxNumOfStudents
    def __str__(self):
        return self._name



class Instructor:
    def __init__(self,id1,name):
        self._id=id1
        self._name=name
    def get_id(self):
        return self._id
    def get_name(self):
        return self._name
    def __str__(self):
        return self._name


class Room:
    def __init__(self,number,seatingcapacity):
        self._number=number
        self._seatingCapacity=seatingcapacity
    def get_number(self):
        return self._number
    def get_seatingCapacity(self):
        return self._seatingCapacity



class Meetingtime:
    def __init__(self,id1,time):
        self._id=id1
        self._time=time
    def get_id(self):
        return self._id
    def get_time(self):
        return self._time


class Department:
    def __init__(self,name,courses):
        self._name=name
        self._courses=courses
    def get_name(self):
        return self._name
    def get_courses(self):
        return self._courses

class Class:
    def __init__(self,id1,dept,course):
        self._id=id1
        self._dept=dept
        self._course=course
        self._instructor=None
        self._meetingTime=None
        self._room=None
    def get_id(self):
        return self._id
    def get_dept(self):
        return  self._dept
    def get_course(self):
        return self._course
    def get_instructor(self):
        return self._instructor
    def get_meetingTime(self):
        return self._meetingTime
    def get_room(self):
        return self._room
    def set_instructor(self,instructor):
        self._instructor=instructor
    def set_meetingTime(self,meetingTime):
        self._meetingTime=meetingTime
    def set_room(self,room):
        self._room=room
    def __str__(self):
        return str(self._dept.get_name())+","+str(self._course.get_number())+","+str(self._room.get_number())+","+str(self._room.get_number())+","+str(self._instructor.get_id())+","+str(self._meetingTime.get_id())

        

